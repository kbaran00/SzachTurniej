@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SzachTurniej.Data
@using Microsoft.AspNetCore.WebUtilities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Logowanie</PageTitle>
<div class="container-md mt-5">
    <div class="row mt-5">
        <div class="col-12 mt-5 mb-4">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="row">
                        <div class="col">
                            <h3 class="card-title">Zaloguj się</h3>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">

                        @if (!string.IsNullOrEmpty(Message))
                        {
                            <div class="alert alert-success">@Message</div>
                        }
                        <section>
                            <StatusMessage Message="@errorMessage" />
                            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <label for="email" class="form-label">Email</label>
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="hasło" />
                                    <label for="password" class="form-label">Hasło</label>
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>
                                <div class="checkbox mb-3">
                                    <label class="form-label">
                                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                        Zapamiętaj mnie
                                    </label>
                                </div>
                                <div>
                                    <button type="submit" class="w-100 btn btn-lg btn-primary">Zaloguj</button>
                                </div>
                                <div>
                                    <p>
                                        <a href="Account/ForgotPassword">Zapomniałeś/aś hasła?</a>
                                    </p>
                                    <p>
                                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Uwtórz nowe konto</a>
                                    </p>
                                </div>
                            </EditForm>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Parameter]
    public string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        Message = QueryHelpers.ParseQuery(uri.Query).TryGetValue("message", out var message) ? message.First() : null;
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
